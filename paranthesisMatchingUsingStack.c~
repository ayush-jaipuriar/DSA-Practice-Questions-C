#include <stdio.h>
#include <stdlib.h>
struct stack {
int size ;
int top;
char *paranthesis;
};

int stackTop ( struct stack *s ) {
if (s->top == -1) {
return '0';
}
return s->paranthesis[s->top];
}


void push ( struct stack *s, char bracket ) {

 s->top++;
 s->paranthesis[s->top]=bracket;
 
}

int pop ( struct stack *s) {

	s->top--;

}

int isEmpty ( struct stack *s ) {
 
	if (s->top==-1) {
	return 1;
	}
	return 0;
}

int isBalanced ( char *expression, int size ) {
	
	struct stack s;
	s.size= size;
	s.top = -1;
	
	for (int i=0; expression[i]!='\0'; i++) {
		if (expression[i]=='(') {
		push(&s, '(');
		}
		else if (expression[i]==')') {
		 if (isEmpty(&s)) {
		 	return 0;
		 }
		 else {
		 	pop(&s);
		 }
		} 
	}
	printf("%c", stackTop(&s));
	
	
	
	return (isEmpty(&s))? 1: -1;
}

int
main (int argc, char *argv[])
{
	int size;
	printf("Enter the size of the expreesion\n");
	scanf("%d", &size);
	char *expression = (char *)malloc(size * sizeof(char));
	printf("Enter the expreesion\n");
	scanf("%s", expression);
	int checkif = isBalanced(expression, size );
	(checkif)? printf("Its balanced\n"): printf("It aint balanced\n");
	return 0;
}


