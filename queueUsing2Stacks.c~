#include <stdio.h>
#include <stdlib.h>
struct stack {
int size;
int top;
int *S;
};

int isEmpty ( struct stack * s) {
if (s->top==-1) {
	return 1;
}
	return 0;
}

void push(struct stack *s1, int number ) {

	if (s1->top==s1->size-1) {
		printf("Stack Overflow\n");
	}
	else {
		s1->top++;
		s1->S[s1->top]=number;
}
}

int pop1(struct stack *s1) {
	if (isEmpty(s1))
		printf("Error : Stack1 is empty\n");
	else {
	int deletedElement = s1->S[s1->top];
	s1->top--;
		
	}
}

int pop2 ( struct stack *s1, struct stack *s2) {
	int x=-1;
	if (isEmpty(s2)) {
		if (s1->top==-1) {
			printf("Error : Both the Stacks are empty\n");
			return x;
		}
		else {
		while (!isEmpty(s1)) {
			int x = pop1(s1); 
			push (s2, x);
		}
		}
		
	}
	return pop2(s1, s2);
}


void displayStack1( struct stack *s1) {
	for (int i=0; i<=s1->top; i++) {
		printf("%d ", s1->S[i]);
	}
}

 

int
main (int argc, char *argv[])
{
	struct stack s1, s2;
	printf("Enter the size of the stack\n");
	
	int size;
	scanf("%d", &size);
	
	s1.size= size;
	s2.size = size;
	s1.top = -1;
	s2.top = -1;
	s1.S=(int *)malloc(size * sizeof(int));
	s2.S=(int *)malloc(size * sizeof(int));	
	int inputElement;
	printf("Enter the elements of the stack\n");
	for (int i=0; i<s1.size; i++) {
		scanf("%d", &inputElement);
		push ( &s1 , inputElement);
		
	}
	
	printf("Printing the elements of Stack 1\n");
	displayStack1( &s1);
	
	printf("Showing the deleted elements of the stack\n");
	
	
	for (int i=0; i<size; i++ ) {
		int deletedElement;
		deletedElement = pop2( &s1, &s2);
		printf("The deleted element is : %d \n", deletedElement);
	
	} 
	
	return 0;
}


